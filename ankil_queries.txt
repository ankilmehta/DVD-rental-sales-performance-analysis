/* Query1 - Create a query that lists each movie, the film category it is classified in, and the number of times it has been rented out. */ 
/* count of family-film category which is rented till date */

SELECT f.title as "name of the film", c.name as category, count(r.rental_id) rent_count
FROM film f
JOIN film_category fc
ON f.film_id = fc.film_id
JOIN category c
ON fc.category_id = c.category_id
JOIN inventory i
ON f.film_id = i.film_id
JOIN rental r
ON i.inventory_id = r.inventory_id
WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
GROUP BY 1,2
ORDER BY 2

-------------------------------------------------------------------------------------------------------------------------------------------------------------

/* Query 2 - provide a table with the movie titles and divide them into 4 levels (first_quarter, second_quarter, third_quarter, and final_quarter) based on the quartiles (25%, 50%, 75%) of the rental duration for movies across all categories */

SELECT f.title as "name of the film",c.name as category,f.rental_duration,NTILE(4) OVER (ORDER BY f.rental_duration) AS "standard quartile based on rental duration"
FROM film f
JOIN film_category fc
ON f.film_id = fc.film_id
JOIN category c 
ON fc.category_id = c.category_id
WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
ORDER BY 4

---------------------------------------------------------------------------------------------------------------------------------------------------------------

/*Query 3 - Finally, provide a table with the family-friendly film category, each of the quartiles, and the corresponding count of movies within each combination of film category for each corresponding rental duration category */

SELECT temp.category,temp.standard_quartile,count(*)
FROM
	(SELECT f.title as title,c.name as category,NTILE(4) OVER (ORDER BY f.rental_duration) standard_quartile 
	FROM film f
	JOIN film_category fc
	ON f.film_id = fc.film_id
	JOIN category c 
	ON fc.category_id = c.category_id
	WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')) temp
GROUP BY 1,2
ORDER BY 2,1,3 DESC


---------------------------------------------------------------------------------------------------------------------------------------------------------------

/* Query4- To find out how the two stores compare in their count of rental orders during every month */

SELECT DATE_PART('month',r.rental_date) as datemonth, s.store_id, COUNT(*)
FROM store s
JOIN inventory i
ON s.store_id =i.store_id
JOIN rental r
ON i.inventory_id = r.inventory_id
GROUP BY 2,1
ORDER BY 1

---------------------------------------------------------------------------------------------------------------------------------------------------------------

/*Query5 - Top Paying Customers in 2007 */

WITH 
top10 AS 
	(SELECT c.customer_id, CONCAT (c.first_name, ' ', c.last_name) fullname, SUM(p.amount)
	FROM payment p
	JOIN customer c
	ON p.customer_id = c.customer_id
	WHERE DATE_PART('YEAR',p.payment_date) = 2007
	GROUP BY 1,2
	ORDER BY 3 DESC
	LIMIT 10)

SELECT top10.fullname as name,DATE_PART('MONTH',p.payment_date)as datemonth,COUNT(*) as total_orders,SUM(p.amount) as total_amount
FROM top10 
JOIN payment p
ON top10.customer_id = p.customer_id
WHERE DATE_PART('YEAR',p.payment_date) = 2007
GROUP BY 1,2
ORDER BY 1,2

---------------------------------------------------------------------------------------------------------------------------------------------------------------

/*Query6 - write a query to compare the payment amounts in each successive month */

WITH 
top10 AS 
	(SELECT c.customer_id, CONCAT (c.first_name, ' ', c.last_name) fullname, SUM(p.amount)
	FROM payment p
	JOIN customer c
	ON p.customer_id = c.customer_id
	WHERE DATE_PART('YEAR',p.payment_date) = 2007
	GROUP BY 1,2
	ORDER BY 3 DESC
	LIMIT 10),
	
top10bymonth as 
	(SELECT top10.fullname as name,DATE_PART('MONTH',p.payment_date)as datemonth,SUM(p.amount) as total_amount
	FROM top10
	JOIN payment p
	ON top10.customer_id = p.customer_id
	GROUP BY 1,2
	ORDER BY 1,2)
	
	SELECT top10bymonth.name, top10bymonth.datemonth,top10bymonth.total_amount,
			COALESCE(top10bymonth.total_amount - 
			LAG(top10bymonth.total_amount) OVER (ORDER BY top10bymonth.name,top10bymonth.datemonth),0) as difference
	FROM top10bymonth


---------------------------------------------------------------------------------------------------------------------------------------------------------------

